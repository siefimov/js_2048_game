{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        this.status = $a5fd07fa01589658$var$Game.STATUS.IDLE;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.PLAYING;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addNewNumber();\n        this.addNewNumber();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.IDLE;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    addNewNumber() {\n        const emptyPositions = this.getEmptyPosition();\n        if (emptyPositions.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyPositions.length);\n        const [row, col] = emptyPositions[randomIndex];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    getEmptyPosition() {\n        const emptyPositions = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyPositions.push([\n                row,\n                col\n            ]);\n        }\n        return emptyPositions;\n    }\n    moveLeft() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            const size = this.state.length;\n            const state = this.getState();\n            let moved = false;\n            for(let row = 0; row < size; row++){\n                const newRow = [];\n                const merged = Array(size).fill(false);\n                for(let col = 0; col < size; col++)if (state[row][col] !== 0) newRow.push(state[row][col]);\n                for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1] && !merged[i] && !merged[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow.splice(i + 1, 1);\n                    merged[i] = true;\n                }\n                while(newRow.length < size)newRow.push(0);\n                for(let col = 0; col < size; col++)if (state[row][col] !== newRow[col]) {\n                    state[row][col] = newRow[col];\n                    moved = true;\n                }\n            }\n            this.handleMove(moved);\n        }\n    }\n    moveRight() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            const size = this.state.length;\n            const state = this.getState();\n            let moved = false;\n            for(let row = 0; row < size; row++){\n                const newRow = [];\n                for(let col = 0; col < size; col++)if (state[row][col] !== 0) newRow.push(state[row][col]);\n                const merged = Array(newRow.length).fill(false);\n                for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1] && !merged[i] && !merged[i - 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow.splice(i - 1, 1);\n                    merged.splice(i - 1, 1);\n                    merged[i - 1] = true;\n                }\n                while(newRow.length < size)newRow.unshift(0);\n                for(let col = 0; col < size; col++)if (state[row][col] !== newRow[col]) {\n                    state[row][col] = newRow[col];\n                    moved = true;\n                }\n            }\n            this.handleMove(moved);\n        }\n    }\n    moveUp() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            const size = this.state.length;\n            const state = this.getState();\n            let moved = false;\n            for(let col = 0; col < size; col++){\n                const newColumn = [];\n                for(let row = 0; row <= size - 1; row++)if (state[row][col] !== 0) newColumn.push(state[row][col]);\n                for(let i = 0; i < newColumn.length; i++)if (newColumn[i] === newColumn[i + 1]) {\n                    newColumn[i] *= 2;\n                    this.score += newColumn[i];\n                    newColumn.splice(i + 1, 1);\n                }\n                while(newColumn.length < size)newColumn.push(0);\n                for(let row = 0; row < size; row++)if (state[row][col] !== newColumn[row]) {\n                    state[row][col] = newColumn[row];\n                    moved = true;\n                }\n            }\n            this.handleMove(moved);\n        }\n    }\n    moveDown() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            const size = this.state.length;\n            const state = this.getState();\n            let moved = false;\n            for(let col = 0; col < size; col++){\n                const newColumn = [];\n                for(let row = 0; row <= size - 1; row++)if (state[row][col] !== 0) newColumn.push(state[row][col]);\n                const merged = Array(newColumn.length).fill(false);\n                for(let i = newColumn.length - 1; i > 0; i--)if (newColumn[i] === newColumn[i - 1] && !merged[i] && !merged[i - 1]) {\n                    newColumn[i] *= 2;\n                    this.score += newColumn[i];\n                    newColumn.splice(i - 1, 1);\n                    merged.splice(i - 1, 1);\n                    merged[i - 1] = true;\n                }\n                while(newColumn.length < size)newColumn.unshift(0);\n                for(let row = 0; row < size; row++)if (state[row][col] !== newColumn[row]) {\n                    state[row][col] = newColumn[row];\n                    moved = true;\n                }\n            }\n            this.handleMove(moved);\n        }\n    }\n    handleMove(moved) {\n        if (moved) {\n            this.addNewNumber();\n            if (this.checkWin()) this.status = $a5fd07fa01589658$var$Game.STATUS.WIN;\n            if (this.checkLose()) this.status = $a5fd07fa01589658$var$Game.STATUS.LOSE;\n        }\n    }\n    checkWin() {\n        return this.state.some((row)=>row.includes(2048));\n    }\n    checkLose() {\n        for(let row = 0; row < this.state.length; row++)for(let col = 0; col < this.state[row].length; col++){\n            if (this.state[row][col] === 0) return false;\n            if (row > 0 && this.state[row][col] === this.state[row - 1][col]) return false;\n            if (row < this.state.length - 1 && this.state[row][col] === this.state[row + 1][col]) return false;\n            if (col > 0 && this.state[row][col] === this.state[row][col - 1]) return false;\n            if (col < this.state[row].lenth - 1 && this.state[row][col] === this.state[row][col + 1]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameBoardRows = document.querySelectorAll(\"tr\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$updateGameFields = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameBoardRows.forEach((row, rowIndex)=>{\n        for (const cell of row.cells){\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n            const cellIndex = cell.cellIndex;\n            const cellValue = state[rowIndex][cellIndex];\n            if (cellValue !== 0) {\n                cell.textContent = cellValue;\n                cell.classList.add(`${cell.className}--${cellValue}`);\n            }\n        }\n    });\n};\nconst $09e991522ca7e64e$var$updateMessage = ()=>{\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n};\nconst $09e991522ca7e64e$var$updateScore = ()=>{\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$startGame = ()=>{\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Start\") $09e991522ca7e64e$var$game.start();\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$updateScore();\n    }\n    $09e991522ca7e64e$var$updateGameFields();\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$isFirstMove = true;\n};\nlet $09e991522ca7e64e$var$isFirstMove = true;\nconst $09e991522ca7e64e$var$handleArrowDown = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if ($09e991522ca7e64e$var$isFirstMove) {\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$isFirstMove = false;\n    }\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$updateGameFields();\n    $09e991522ca7e64e$var$updateScore();\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleArrowDown);\n\n\n//# sourceMappingURL=index.01cf0abc.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst gameBoardRows = document.querySelectorAll('tr');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst updateGameFields = () => {\n  const state = game.getState();\n\n  gameBoardRows.forEach((row, rowIndex) => {\n    for (const cell of row.cells) {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n\n      const cellIndex = cell.cellIndex;\n      const cellValue = state[rowIndex][cellIndex];\n\n      if (cellValue !== 0) {\n        cell.textContent = cellValue;\n        cell.classList.add(`${cell.className}--${cellValue}`);\n      }\n    }\n  });\n};\n\nconst updateMessage = () => {\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (game.getStatus() === 'idle') {\n    messageStart.classList.remove('hidden');\n  }\n};\n\nconst updateScore = () => {\n  gameScore.textContent = game.getScore();\n};\n\nconst startGame = () => {\n  if (startButton.textContent === 'Start') {\n    game.start();\n  }\n\n  if (startButton.textContent === 'Restart') {\n    game.restart();\n\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    updateScore();\n  }\n\n  updateGameFields();\n  updateMessage();\n\n  isFirstMove = true;\n};\n\nlet isFirstMove = true;\n\nconst handleArrowDown = (e) => {\n  if (game.getStatus() === 'idle') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  if (isFirstMove) {\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    isFirstMove = false;\n  }\n\n  updateMessage();\n  updateGameFields();\n  updateScore();\n};\n\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', handleArrowDown);\n","'use strict';\n\nclass Game {\n  static STATUS = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    this.status = Game.STATUS.IDLE;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS.PLAYING;\n    this.state = this.initialState.map((row) => [...row]);\n    this.addNewNumber();\n    this.addNewNumber();\n  }\n\n  restart() {\n    this.status = Game.STATUS.IDLE;\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  addNewNumber() {\n    const emptyPositions = this.getEmptyPosition();\n\n    if (emptyPositions.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyPositions.length);\n    const [row, col] = emptyPositions[randomIndex];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getEmptyPosition() {\n    const emptyPositions = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyPositions.push([row, col]);\n        }\n      }\n    }\n\n    return emptyPositions;\n  }\n\n  moveLeft() {\n    if (this.getStatus() === Game.STATUS.PLAYING) {\n      const size = this.state.length;\n      const state = this.getState();\n      let moved = false;\n\n      for (let row = 0; row < size; row++) {\n        const newRow = [];\n        const merged = Array(size).fill(false);\n\n        for (let col = 0; col < size; col++) {\n          if (state[row][col] !== 0) {\n            newRow.push(state[row][col]);\n          }\n        }\n\n        for (let i = 0; i < newRow.length - 1; i++) {\n          if (newRow[i] === newRow[i + 1] && !merged[i] && !merged[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow.splice(i + 1, 1);\n            merged[i] = true;\n          }\n        }\n\n        while (newRow.length < size) {\n          newRow.push(0);\n        }\n\n        for (let col = 0; col < size; col++) {\n          if (state[row][col] !== newRow[col]) {\n            state[row][col] = newRow[col];\n            moved = true;\n          }\n        }\n      }\n\n      this.handleMove(moved);\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() === Game.STATUS.PLAYING) {\n      const size = this.state.length;\n      const state = this.getState();\n      let moved = false;\n\n      for (let row = 0; row < size; row++) {\n        const newRow = [];\n\n        for (let col = 0; col < size; col++) {\n          if (state[row][col] !== 0) {\n            newRow.push(state[row][col]);\n          }\n        }\n\n        const merged = Array(newRow.length).fill(false);\n\n        for (let i = newRow.length - 1; i > 0; i--) {\n          if (newRow[i] === newRow[i - 1] && !merged[i] && !merged[i - 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow.splice(i - 1, 1);\n            merged.splice(i - 1, 1);\n            merged[i - 1] = true;\n          }\n        }\n\n        while (newRow.length < size) {\n          newRow.unshift(0);\n        }\n\n        for (let col = 0; col < size; col++) {\n          if (state[row][col] !== newRow[col]) {\n            state[row][col] = newRow[col];\n            moved = true;\n          }\n        }\n      }\n\n      this.handleMove(moved);\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() === Game.STATUS.PLAYING) {\n      const size = this.state.length;\n      const state = this.getState();\n      let moved = false;\n\n      for (let col = 0; col < size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row <= size - 1; row++) {\n          if (state[row][col] !== 0) {\n            newColumn.push(state[row][col]);\n          }\n        }\n\n        for (let i = 0; i < newColumn.length; i++) {\n          if (newColumn[i] === newColumn[i + 1]) {\n            newColumn[i] *= 2;\n            this.score += newColumn[i];\n            newColumn.splice(i + 1, 1);\n          }\n        }\n\n        while (newColumn.length < size) {\n          newColumn.push(0);\n        }\n\n        for (let row = 0; row < size; row++) {\n          if (state[row][col] !== newColumn[row]) {\n            state[row][col] = newColumn[row];\n            moved = true;\n          }\n        }\n      }\n\n      this.handleMove(moved);\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() === Game.STATUS.PLAYING) {\n      const size = this.state.length;\n      const state = this.getState();\n      let moved = false;\n\n      for (let col = 0; col < size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row <= size - 1; row++) {\n          if (state[row][col] !== 0) {\n            newColumn.push(state[row][col]);\n          }\n        }\n\n        const merged = Array(newColumn.length).fill(false);\n\n        for (let i = newColumn.length - 1; i > 0; i--) {\n          if (\n            newColumn[i] === newColumn[i - 1] &&\n            !merged[i] &&\n            !merged[i - 1]\n          ) {\n            newColumn[i] *= 2;\n            this.score += newColumn[i];\n            newColumn.splice(i - 1, 1);\n            merged.splice(i - 1, 1);\n            merged[i - 1] = true;\n          }\n        }\n\n        while (newColumn.length < size) {\n          newColumn.unshift(0);\n        }\n\n        for (let row = 0; row < size; row++) {\n          if (state[row][col] !== newColumn[row]) {\n            state[row][col] = newColumn[row];\n            moved = true;\n          }\n        }\n      }\n\n      this.handleMove(moved);\n    }\n  }\n\n  handleMove(moved) {\n    if (moved) {\n      this.addNewNumber();\n\n      if (this.checkWin()) {\n        this.status = Game.STATUS.WIN;\n      }\n\n      if (this.checkLose()) {\n        this.status = Game.STATUS.LOSE;\n      }\n    }\n  }\n\n  checkWin() {\n    return this.state.some((row) => row.includes(2048));\n  }\n\n  checkLose() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          return false;\n        }\n\n        if (row > 0 && this.state[row][col] === this.state[row - 1][col]) {\n          return false;\n        }\n\n        if (\n          row < this.state.length - 1 &&\n          this.state[row][col] === this.state[row + 1][col]\n        ) {\n          return false;\n        }\n\n        if (col > 0 && this.state[row][col] === this.state[row][col - 1]) {\n          return false;\n        }\n\n        if (\n          col < this.state[row].lenth - 1 &&\n          this.state[row][col] === this.state[row][col + 1]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","STATUS","IDLE","PLAYING","WIN","LOSE","constructor","initialState","status","state","map","row","score","getScore","getState","getStatus","start","addNewNumber","restart","emptyPositions","getEmptyPosition","length","randomIndex","Math","floor","random","col","push","moveLeft","size","moved","newRow","merged","Array","fill","i","splice","handleMove","moveRight","unshift","moveUp","newColumn","moveDown","checkWin","checkLose","some","includes","lenth","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$gameBoardRows","querySelectorAll","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$updateGameFields","forEach","rowIndex","cell","cells","textContent","className","cellIndex","cellValue","classList","add","$09e991522ca7e64e$var$updateMessage","remove","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$isFirstMove","addEventListener","e","key"],"version":3,"file":"index.01cf0abc.js.map"}